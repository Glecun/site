(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),i=(n(0),n(111)),o={id:"adding-assets",title:"Adding Assets",sidebar_label:"Adding Assets"},c={unversionedId:"adding-assets",id:"adding-assets",isDocsHomePage:!1,title:"Adding Assets",description:"A common part of applications is importing assets, such as images, fonts, and files.",source:"@site/docs/adding-assets.md",slug:"/adding-assets",permalink:"/docs/adding-assets",version:"current",sidebar_label:"Adding Assets",sidebar:"docs",previous:{title:"Packaging",permalink:"/docs/packaging"},next:{title:"Adding Dependencies",permalink:"/docs/adding-dependencies"}},s=[{value:"Build-time Assets",id:"build-time-assets",children:[]},{value:"Run-time Assets",id:"run-time-assets",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A common part of applications is importing assets, such as images, fonts, and files."),Object(i.b)("h2",{id:"build-time-assets"},"Build-time Assets"),Object(i.b)("p",null,"In the context of ERB, build-time assets are those that are managed by Webpack. They are imported like JS modules and transformed to encoded strings by Webpack."),Object(i.b)("p",null,"Out of the box, ERB supports the following assets:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Asset"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Supported Extensions"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Images"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),Object(i.b)("inlineCode",{parentName:"td"},".jpg"),", ",Object(i.b)("inlineCode",{parentName:"td"},".png"),", ",Object(i.b)("inlineCode",{parentName:"td"},".jpg"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Fonts"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),Object(i.b)("inlineCode",{parentName:"td"},".svg"),", ",Object(i.b)("inlineCode",{parentName:"td"},".ttf"),", ",Object(i.b)("inlineCode",{parentName:"td"},".eot"))))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import catImage from './cat.jpg';\n\nfunction CatComponent() {\n  return (\n    <img src={catImage} />\n  );\n}\n")),Object(i.b)("h2",{id:"run-time-assets"},"Run-time Assets"),Object(i.b)("p",null,"In the context of ERB, run-time assets are separate files that are included in the packaged application and used through file paths. You will need to include their locations in ",Object(i.b)("inlineCode",{parentName:"p"},"package.json['build']['files']"),". This is so that ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.electron.build/configuration/contents#files"}),"electron-builder's configuration")," knows to include them when packaging."),Object(i.b)("p",null,"(Note that these locations are relative to the ",Object(i.b)("inlineCode",{parentName:"p"},"app/")," directory)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsonc"}),'"build": {\n    ...\n    "files": [\n      "assets/"\n      ...\n    ],\n}\n')),Object(i.b)("p",null,"For example, you can include Python within your electron app and call it at run-time to print ",Object(i.b)("inlineCode",{parentName:"p"},"Hello World from Python"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const pythonBinary = path.join(__dirname, 'assets', 'python');\nconst pythonScript = 'print(\"Hello World from Python\")';\nexec(`echo '${pythonScript}' | ${pythonBinary}`, (error, stdout) => {\n  console.log(`stdout: ${stdout}`);\n});\n")),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/electron-react-boilerplate/examples/commit/d1eddcd0e30ec22edd3fd3900ee3c12e1da4cdba"}),"Here is a runnable example of this")),Object(i.b)("p",null,"A useful tip is using ",Object(i.b)("inlineCode",{parentName:"p"},"asar")," (the format that ",Object(i.b)("inlineCode",{parentName:"p"},"electron-builder")," packages into) to see the contents of the packaged build. You will see that it contains content included within ",Object(i.b)("inlineCode",{parentName:"p"},"package.json['build']['files']"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"asar list release/mac/ElectronReact.app/Contents/Resources/app.asar\n")))}p.isMDXComponent=!0}}]);