(self.webpackChunk_electron_react_boilerplate_site=self.webpackChunk_electron_react_boilerplate_site||[]).push([[380],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},624:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(4034),o=n(9973),a=(n(7294),n(3905)),l={id:"styling",title:"Styling",sidebar_label:"Styling"},i=void 0,s={unversionedId:"styling",id:"styling",isDocsHomePage:!1,title:"Styling",description:"CSS Modules",source:"@site/docs/styling.md",sourceDirName:".",slug:"/styling",permalink:"/docs/styling",editUrl:"https://github.com/electron-react-boilerplate/site/edit/master/docs/styling.md",version:"current",frontMatter:{id:"styling",title:"Styling",sidebar_label:"Styling"},sidebar:"docs",previous:{title:"Native Modules",permalink:"/docs/native-modules"},next:{title:"Component Tests",permalink:"/docs/component-tests"}},p=[{value:"CSS Modules",id:"css-modules",children:[]},{value:"Importing CSS",id:"importing-css",children:[]},{value:"Tailwind Integration",id:"tailwind-integration",children:[{value:"Without Custom Tailwind Config",id:"without-custom-tailwind-config",children:[]},{value:"Custom Tailwind Config",id:"custom-tailwind-config",children:[]}]},{value:"Using SCSS",id:"using-scss",children:[]},{value:"Images",id:"images",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"css-modules"},"CSS Modules"),(0,a.kt)("p",null,"This boilerplate is configured to use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/css-modules/css-modules"},"css-modules")," out of the box."),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},".css")," file extensions will use css-modules unless it has ",(0,a.kt)("inlineCode",{parentName:"p"},".global.css"),"."),(0,a.kt)("p",null,"If you need global styles, stylesheets with ",(0,a.kt)("inlineCode",{parentName:"p"},".global.css")," will not go through the\ncss-modules loader. e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"app.global.css")),(0,a.kt)("p",null,"If you want to import global css libraries (like ",(0,a.kt)("inlineCode",{parentName:"p"},"bootstrap"),"), you can just write the following code in ",(0,a.kt)("inlineCode",{parentName:"p"},".global.css"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@import "~bootstrap/dist/css/bootstrap.css";\n')),(0,a.kt)("h2",{id:"importing-css"},"Importing CSS"),(0,a.kt)("p",null,"Say, you want to import css file from font-awesome module. Use following syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@import "~font-awesome/css/font-awesome.css";\n')),(0,a.kt)("p",null,"Note the tilde ",(0,a.kt)("inlineCode",{parentName:"p"},"~")," placed before module name."),(0,a.kt)("p",null,"Similar syntax is used for SCSS too."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/falcon-client/falcon/blob/master/app/app.global.css#L1"},"Falcon Client"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Further Readings")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues/1087"},"Cannot import CSS? #1087")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues/1076"},"Imported (not global) css is not working. #1076"))),(0,a.kt)("h2",{id:"tailwind-integration"},"Tailwind Integration"),(0,a.kt)("p",null,"electron-react-boilerplate doesn't come with tailwind integration out of the box. There are two ways of configuring tailwind which depend whether you want to customize your tailwind config or not."),(0,a.kt)("h3",{id:"without-custom-tailwind-config"},"Without Custom Tailwind Config"),(0,a.kt)("p",null,"If you ",(0,a.kt)("strong",{parentName:"p"},"do not want to customize tailwind"),", you can simply run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn add tailwindcss"),", then at the bottom of ",(0,a.kt)("strong",{parentName:"p"},"App.global.css")," add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@import '~tailwindcss';\n")),(0,a.kt)("p",null,"That should be enough to apply default tailwind styles. You use the ",(0,a.kt)("inlineCode",{parentName:"p"},"~")," in the beginning to tell ERB to look in the node_modules as per the instructions found here: ",(0,a.kt)("a",{parentName:"p",href:"https://electron-react-boilerplate.js.org/docs/styling"},"https://electron-react-boilerplate.js.org/docs/styling")," ."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"custom-tailwind-config"},"Custom Tailwind Config"),(0,a.kt)("p",null,"If you ",(0,a.kt)("strong",{parentName:"p"},"do want to customize tailwind"),", install the necessary dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev tailwindcss postcss postcss-loader autoprefixer\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Add the following snippet after the ",(0,a.kt)("inlineCode",{parentName:"li"},"css-loader")," entry in the first test for global css files ( /",".","global",".","css$/ ) in ",(0,a.kt)("strong",{parentName:"li"},"webpack.config.renderer.dev.babel.js")," and also after ",(0,a.kt)("inlineCode",{parentName:"li"},"sass-loader")," entry in ",(0,a.kt)("strong",{parentName:"li"},"webpack.config.renderer.prod.babel.js")," (for packaging):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="webpack.config.renderer.dev.babel.js, webpack.config.renderer.prod.babel.js"',title:'"webpack.config.renderer.dev.babel.js,','webpack.config.renderer.prod.babel.js"':!0},"{\n    // ...\n\n    loader: 'postcss-loader',\n    options: {\n      postcssOptions: {\n        plugins:\n          [\n            require('tailwindcss'),\n            require('autoprefixer'),\n          ]\n      }\n    }\n}\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Create ",(0,a.kt)("strong",{parentName:"li"},"postcss.config.js")," in the ",(0,a.kt)("strong",{parentName:"li"},".erb/configs")," folder with the following config:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title=".erb/configs/postcss.config.js"',title:'".erb/configs/postcss.config.js"'},"const tailwindcss = require('tailwindcss');\nconst autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n  plugins: [tailwindcss, autoprefixer],\n};\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Add the following at the end of your ",(0,a.kt)("strong",{parentName:"li"},"App.global.css")," file:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scss",metastring:'title="App.global.css"',title:'"App.global.css"'},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")),(0,a.kt)("p",null,"Create a ",(0,a.kt)("strong",{parentName:"p"},"tailwind.config.js")," file in the ",(0,a.kt)("strong",{parentName:"p"},"root folder of your project")," with the following config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},"import colors from 'tailwindcss/colors';\n\nmodule.exports = {\n  purge: [],\n  darkMode: false, // or 'media' or 'class'\n  theme: {\n    extend: {\n      colors: {\n        sky: colors.sky,\n        cyan: colors.cyan,\n      },\n    },\n  },\n  variants: {\n    extend: {},\n  },\n  plugins: [],\n};\n")),(0,a.kt)("h2",{id:"using-scss"},"Using SCSS"),(0,a.kt)("p",null,"Use following example project to learn how to migrate from CSS to SCSS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/amilajack/popcorn-time-desktop"},"Popcorn Time Desktop")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/amilajack/erb-bootstrap-example"},"ERB Bootstrap Example"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Further Readings")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues/984"},"How to remove css-modules ? #984"))),(0,a.kt)("h2",{id:"images"},"Images"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"./src/img")," is the recommended folder for images."),(0,a.kt)("p",null,"Do not use ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," folder. It is actually intended for build assets."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/amilajack/popcorn-time-desktop/tree/master/app/images"},"Example of ",(0,a.kt)("inlineCode",{parentName:"a"},"./src/img")," folder")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/amilajack/popcorn-time-desktop/blob/master/app/components/card/Card.js#L10-L11"},"Usage of image in ",(0,a.kt)("inlineCode",{parentName:"a"},"./src/img")," folder"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Further Readings")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues/951"},"[background-image from resources #951]"))))}u.isMDXComponent=!0}}]);